HTTP protocol: https://www.w3.org/Protocols/rfc2616/rfc2616.html

API: Application Programming Interface
It is an interface that lets you run/execute a program inside an application.
Interface: The place from where you are telling the program to run
Program: The task that is being done.
Application: the software that owns/maintainsdd this program and executes it. This software will own multiple other programs

Normally, the interface to any program is a nice UI/web app. But some programs can be executed programatically, and such programs are called APIs. The interface here is not a UI/Web app, it is a program. You tell a program to RUN, that you don't own. (it is owned by some other application).
Websites are 100% dependant on their APIs.

Advantages:
>You just use the program, you don't have to write It
>An API is platform independent, the program executes somewhere else, but your interface can be anywhere/anything.
>APIs are upfgrade safe. That program can have many upgrades, but your interface will be the same.

API Transaction = Request + Program runs + Response.
The program runs on the URL domain. On their computer. (like google.com, ebay.com)
You call an program and it returns a result. It is a contract of what it will give (and not how it will do it and give it)

Web Service: Any API that uses the Internet.  (so all web services are apis, but not all apis are web services)
Almost all APIs are webservices nowadays. Non internet APIs are just programs calling other programs within the same device.

Web Services use- (the send data over the network)
>XML or JSON as a data format
>Use protocols for communication- http (normal,rest,soap), xml/rpc

HTTP: Hypertext transfer protocol. Almost every web service uses this protocol. (set of rules of client-server communication)

Request-  (it has 4 parts)
>Start Line: the http version like http/1.1, The PATH and query params, The method GET info, POST create info, PUT change info, DELETE remove info.
Example: GET /search?q=tuna HTTP/1.1
>Headers: additional info, like the application name (host=google.com), token info (secure keys). there can be multiple lines here......
>Blank Line        (this is just to distinguish where the headers finish and where the body starts)
>Body: GET will be empty, POST will contain name-value pairs, JSON, XML, images, html, audio, video, .csv etc. (any content you want to send to the API/program to do your request) (the header 'content-type' is important)

Only the Start line is mandatory

Response- Same format as request. Same 4 parts.
>Start Line:  the http version like http 1.1, status code of the transaction 1xx(wait longer), 2XX (successful), 3XX(req redirecteed to someother host), 4XX (problem at requester), 5XX (problem at the program itself on the server).
Example: HTTP/1.1 200 OK
>Headers: cookies to set.. , file size of response, format of the response (json/js/html), other info about how/what this response is, there can be multiple lines here....
>Blank Line        (this is just to distinguish where the headers finish and where the body starts)
>Body: name-value pairs, images, JSON, XML, html, audio, video, .csv etc., whatever you requested (the header 'content-type' is important)

Idempotence: Can do something as many times as you want, you will get the same response. It is safe to repeat.
Examples: Get, put, delete are idempotent.       .POST is not idempotent (it will keep adding extra info)

XML: eXtensible Markup Language. XML was created by W3C (the same group that created/maintains CSS, HTML, ecmaScript, soap, wsdl etc.)
It is a content-type (application/xml). File extension is .xml. XML is more powerful and complicated than JSON.
HTML is not extensible. The tags have fixed meanings. But in XML, the tags have no functional meaning, they are just name value pairs.
This XML could be in the request/response body -
<pizza>
	<size> large </size>
	<Toppings>
		<topping> onion </topping>
		<topping> pine apple</topping>
		<topping> mushrooom</topping>
	<Toppings>
</pizza>

JSON: Javascript Object Notation
It is a content-type (application/json). Key must be a "string".  File extension is .json
JSON was created by Douglas Crockford.
{
	"pizza" : [
		{
			"size": "large",
			"toppings" : [ "onion", "pine apple", "mushroom"]
		}
	]
}
JSON is much more popular than XML, and XML is slowly fading out in web services.

SOAP: Simple Object Access Protocol   (created by W3C, the ones who created XML obviously)
It is a way/protocol/rule to form a http request and http response in a web service. Every SOAP is a web service API.
The object that it is access's is a web service or API.
It uses a WSDL (Web Services Description Language). This is in XML and it describes the web service.

Request-
Start Line: POST WSDL-Location HTTP version   (you always have to use post, it is just a dummy/placeholder, does not mean anything and it literally not used by the server)
Header Line: Content-type has to be text/html
Blank Line
Body: an XML adhering to rules in WSDL

Response-  (start line, headers are like a normal http response)
Body: XML only

SOAP can use HTTP, SMTP, FTP etc.

REST: Representational State Transfer
It is a way to form a http request and http response in a web service. It came after soap. lesser rules than soap. (no wsdl)
Your response is a representation/copy of the state at that moment in time on the server.
On the server, the state is ever changing... lots of different programs/users are updating the state. All you get is a copy.
REST is http only (not SMTP, FTP etc)

Before HTTP (1989), there was SUN RPC (remote procedure call)
Again in 1998, something called XML-RPC started, but failed
1999 - SOAP was invented by W3C. (much better than XML-RPC)
2000 - REST invented by roy fielding
REST is much more popular than SOAP. SOAP is slowly fading away. It is the most modern way to do APIs today.

in REST, the method is very important - get, post, put, delete (CRUD) (soap has only post, though it does'nt mean anything)
The server/program does ONLY what the method says.
REST is more about just updating and reading databases. If the server is down, you can't read anything on the DB, you won't get any response back.

REST is basically what any HTTP request is today. Before this, it was all SOAP.


HTTPS: basically encrypted HTTP
a)Authentication: Proving your identity. (username & password)
b)Authorization: How much access/permissions do you have for the different resources
>No Auth: a,b are not needed      Example: google search
>Basic Auth: a needed but b not needed      Example: email account. You have full authorization to do whatever.
>Bearer Token: b needed but not a        Example: Someone gets a token for authorized access of someone else's content. Meaning you can see all their 'public' data.
>OAuth: a and b are needed
>Two factor Authentication: 2*a needed but b not needed  example: logging into some govt db as a govt employee (you have full access)

Applications: There are three types of apps
>Native app: runs on OS directly (windows,mac,linux,android,ios). Every OS has APIs (not web services). Your app uses these to work.
So waze app, accesses the OS 'location' api to know your current location.
High quality, performance and speed. You need to download and install it though.
>Web app: runs on browser. It runs on browser APIs. these can work on any OS. You just have to worry about the browsers.
These are low cost. Also, not installation needed.
>Hybrid App: mix of both.


oAuth: 'Open' Authorization: Giving a 3rd party, limited access to your resources.
Client is authorized to have limited access to the resource owner. Just read access of the public folder.
The client basically gets authorization to a web service (Resource Server) that the resource owner has created.
oAuth 1.0 is gone. Only worry about oAuth2.0
The authorisation server is the one that provides this permission (token) to the client.
a)Client  --> Authorization Request -->  Resource Owner
b)Client  <-- Authorization Grant <--  Resource Owner
c)Client  --> Authorization Grant -->  Authorisation Server
d)Client  <-- Access token <--  Authorisation Server
e)Client  --> Access token -->  Resource Server
f)Client  <-- Protected Resource <--  Resource Server

All tokens are "strings" !! The access token has a limited time span say 1 month. A refresh token is something that last 12 months, the client provides it's refresh token after every month, to get a new access token.

oAuth:
>In you developer account, create an app on paypal.com. You will get an client_id and a secret. These two values are unique to your application.
>Form your application, Make a request to paypal.com/token (oauth server) giving your client_id and secret. You will get an access token from paypal which will have a limited validity.
>Now with this access token, make multiple requests to the paypal resource endpoints.. you will get responses.  (the resource server in the background verifies your access token with the oauth server)

Webhooks:
A Webservice connected to an event. I.e a webservice is automatically called when a particular event takes place.
It is a like a reverse API. The server pings the client when something happens. Like notificaitons.
Every device has an IP address. So the client gives permission to the server to ping the client whenever a particular event takes place.
Examples: Unusual Logins on bank accounts, Item delivered notification

Microservices Architecture: (as opposed to monolith architecture, i.e one big api)
It is just Multiple Small/Medium APIs.
>Scalable  (mabye few services get ore servers than others depending on demand)
>Code language independent
>Diff teams can work on diff endpoints (but this creates inconsistencies)



------------------------------------------------------------------------------------------------------------------------
REST APIs

Year 1995: An online dvd store website would have its own web-server serving it html, and the web-server had a dvd-inventory database that it would access. This dvd-store website would also show most popular movies on their website. how? their web-server would directly talk to IMDB's (internet movie database) webserver and it would receive the html file from imbcb, then, it would do screen scraping to get the data out and then create html to serve for the online dvd-store website. Similarly, this dvd-store website would ping fedex webserver, scrape the hmtl, and then show tracking status for dvd-delveries.
There are two problems with the old approach
>Too much html scrapping on the web-server
>If imdb/fedex change their website html, you have to change your scraping logic too.

Year 2000: Web developers started provding two URLs
>one URL for the browser  (this will serve html)
>one URL for the application (this will serve XML)
Now as the third party sites would change their html, the underlying data (XML) would remain constant. Thus Web Services were born.
XML became the format of choice for data transfer.
XML over http became called XML-RPC - Remote Procedure call

Web Service: A user interface to a data system, for use by an applications rather than humans.
It is a well defined contract between the provider and the consumer. Contract: Structure of the request and response XML.

2003: A standard around XML became popular, called SOAP (as opposed to XML-RPC). The standard defines the structure of the messages exchanged. Also some other security etc standards.

2005: Mobile devices and SPA slowly started, web developers saw issues in SOAP protocol and XML
>XML is heavy in terms of network traffic. (can't have large payloads in 3g etc)
>Parsing XML is Cpu and memory intensive (known fact about xml)
>Slow performance of xml on browsers. Also front end code was complex try to handle XML
>Mobile device battery performance reduces due to xml
>Standards abd versions of standards caused confusion and complexity.

2006: JSON became popular. Yahoo and google offered their JSON/RPC APIs.
REST apis were born. Although, in 2000 itself, the phd student Roy fielding published his dissertation, described/coined the REST architectural principles

2018: Google, Facebook, twitter, FedEx, BBC, Walmart, Tesla, Uber are some big companies that provide RESTFUL Json/xml apis.

REST: Representational State Transfer.
An image of the current state of the data in the DB is passed from the backend to the frontend.
The DB has data about all kinds of 'resources'. The resources's state change over time. Every REST api is just trying to access/modify info about some resource entity.
The webserver will convert this 1 particular row of data (the state) in the DB to html, xml, json, txt, pdf, xls, jpeg whatever/whoever the consumer is. Website, mobile app, single page app etc. If it does'nt serve html, then it is a web service / api. The consumer specifies the format of the data. Or the provider stamps a contract and the consumer must just follow the contract.

An API is said to be RESTful if it follows the >Architectural Style and >Set of Principles of REST. Note: REST is NOT a standard but an architectural style.
The http protocol is the preffered choce to buid a REST api, but it is not the only choice.

Consumer Types:
>Private/Internal: The same group that owns and provides the data.
>Public/External: Users outside of the organisation that creates/owns the apis. (public developers). No idea who they are.
>Partner: A known consumer, they have a trusted relationship with the data owners. But you still don't trust them.

Hence there are three types of APIs, one for each of the above. Private, Public and External APIs.
>Private API: The org's internal intranet wesbite/apps and the org's public facing website/app use this api. If there is no public facing app, then this api can be within the firewall of the org. No need to publicize to anyone.
>Public API: A public untrusted developer who owns some app will use this one
>Partner API: A trusted partner's developers use this api within their org's internal network, they also directly use it for their own public facing app.

From an implementation of code perspective, there is no difference between these types of apis.
The only difference is the way they are managed -
>API Security: For Private, since they are all trusted developers, you can use basic auth or some token base proprietary scheme.
for public/partner, cannot trust the consumer. Use key/secret or oAuth
>Documentation: Regardless of the API type, you must have solid docs. For private/partner, just emails or internal websites/wikis are enough. For public, publish a website or developer portal.
>Access Request: For Private/partner -  emails, internal ticketing process. For public, use a developer portal where they give their info and application info etc.
>Service Level Agreement Management: Generally you will have SLA tiers. Up time - 99.99%, Throughput: 20 calls/second. Support- Email, Call Center.
For private/partner - unlimited access, very good SLAs. For public - restricted access etc. The API provider must provide a website/app to publish realtime api KPI's information (runtime management).

REST Architectural Constraints: The 6 rules you must follow to classify your architecture as RESTful.
These 6 were published by Roy Fileding in his original 2000 phd paper.
HTTP with JSON does not necessarily mean RESTful. It might be RESTish architecture.
>Client Server: architecture must follow the client server architectural principles
seperation of concerns: server app cares about performance, database for all the data, scaling, caching, authentication, authorisation, data security. Client app cares about UX, the user interface, multi form-factor support. So the client code and server code should be seperate with no direct links/func calls. The client and server should be able to change or evolve without impacting each other independently (i.e as long as the contracts don't change).
>Uniform Interface: the use of well defined technical communication contract that is uniform and is between the client and the server.
This contract is the interface. there is no business context in this contract, pure technical stuff. Preffered method is http methods and media types. There are some guidelines for this -
Identity of the resource must be set (URI/URL): The API, to manipulate the state of resource must provide a URL. HTTP/1.1 GET http://www.yo.com/payments
Representation of the resource: Client receives data in a format that is different from the server.
Self Descriptive messages: The request and responses have enough metadata for each end to be able to process the required info and do the task. (http headers are used for this) (content-type, http status code, host, accept)
Hypermedia: Server not only blindly send response data but also send possible actions/links that the client can take/execute on this given data (HATEOAS)
>Statelessness: the server must not manage the state of the applications.
Normally, the client connects to the back-end resource through a mid-tier, i.e a web server.
Now, This server maintains a client state on its machine, by way of a https session. It tracks the client state. This is not allowed in REST.
Each client request must independent of any previous request made by the request. So make sure you send all relevant data in every request. Web-server does not manage any state, so every client call is independent and new. Client manages the state within the client.
Disadvantages: negative impact on speed, too much traffic on the network, server receives too many requests
>Caching: the server controls the caching of responses by way of HTTP headers for caching
Browser maintains a local cache (written to your file system) -> Shared Cache (managed at a gateway to your site) -> Web-server (mid-tier) based caching. The whole point of cache is speed of response. Server also recieves less requests. So for rest server cache is not allowed.
Response messages from the serve MUST be explicitly labeled as cacheable or non-cacheable.
Headers - cache-control (who/how-long/under-what-conditons), expires, last-modified (server tells when this was last changed). ETag (unique id for each response).
Caching counterbalances the negatives of statelessness
>Layered System: Your architecture should have multiple layers and each of these layers should be manageable independently.
No one layer can see past the next. Layers maybe added/removed or modfied based on needs. The client must never directly connect to the app server. You must hvae a load balancer.
DB -> App Server -> Load Balancer -> gateway -> Client
>Code on Demand (optional): the server can send not only data but also some code that can be executed by the client
Server also sends a java-applet, flash or JS.

How to measure RESTfulness of your architecture: Richardson Maturity Model. The enterprise gets assigned a score of 0 to 3.
Level 0: Plain old XML, Xml-rpc based mechanism.
Level 1: Resources: Every resource is a URI.
Level 2: HTTP verbs, usage of get/put/post/delete (CRUD) for /acme/vacation
Level 3: Hypermedia Controls: HATEOAS hypermedia as the engine of application state. Server responds with extra links/actions that the client can use subsequently (along with the data). In this way, the server controls the URI schema without breaking the client. Visited a pdp? here is the pdp data along with the A2C API URL. Also, new operations and capabilites are automatically exposed by the server.

Designing REST API
DB -> API develper -> API -> App developer -> APP -> User
If your app developer is not happy, no one will use your api (end product).

Api Name: base url + version + resource.   https://api.walmartlabs.com/v1/items
>Avoid using your www domain for the api like www.walmart.ocm
>Base url must be simple. Try to use a different domain.
>Also use a sub-domain - api.twitter.com
>For Crud operations: Use nouns to identify the resource. Never a VERB!Use plurals.   /items , /people, /programmes and not /getPeople, /getItems
>Non-crud operations:  uber/estimate/prices, twitter/friendships/lookup, /search?query=tape   So here you can use verbs.
>Associations;  facebook/me/photos, walmart/items/{id}/reviews, twitter/mutes/users/list. Try not to go past 3 levels, use query params instead.
acme/vacations/{id}/reviews/{review-id}

REST - CRUD
Status Code: 1XX Informational, 2XX Success, 3X Redirection, 4X Client Error, 5X Server Error.
There are over 70 status codes. Try to restrict your API to use about 8-10.
Post - create         success:201  failure:400 missing required field, 503 database unreachable
Get - read/retrieve   success:200  failure:404 resource not found, 500 internal server error
Put & patch - update  success:200, 204 no content, 201 created   failure:404 resource not found, 503 database unreachable
Delete - delete       success:200, 204    failure:404,503
Options, Head, Trace, Connect

Your api must be able to support multiple formats, Request formats:
>query param:  walmart/search/q=iphone&format=xml
>request header: accept: application/json
>Resource format suffix:  bbc/programmes/schedules/fm/today.json or today.xml



Error Responses -
>Most services nowadays respond in JSON, content-type response header to json, http status code should be 415 if server does not support that format
>Error Response template: {message (some high-level summary), timestamp, httpMethod, endPointInfo, errorList, payload}. Your errorList is an array of {applicationSpecificErrorCodeNumber, errorText, hintstToResolve, infoToDocumentation }
The whole point of this error template is to help the app developer
>You can also, always return 200 ok, but the response object has an error object. Here the response object is a fixed format format for ALL responses. The error object is there in it only in case of errors. Facebook uses this approach.
Application Specific Error Codes that you can use - 5XXX (unknown error), 6XXX(any DB errors), 7XXX (validation errors)

Project: mongoDb instance, NodeJS instance. Run your nodejs index.js file. It is now listening for requests. Open postman and make requests to localhost.. You now have an application -> web server -> db.

API Changes: Should be done less than twice a year.
>Private API: You just tell your internal devs about what the changes are. For public/partner APIs, managing change is very complciated. Sometimes, you don't even know your external stakeholders.
>Non-breaking change: Existing app code should not break due to this API change.
Example: You are just adding new harmless fields to the payload..etc. Or adding a whole new endpoint, or newquery params
Supporting backward compatibility is also a non-breaking change.
>Breaking Change: This requires App developers to make changes
Example: Change in http method, change in resource name, change in payload
>the API layer must try to absorb any changes in the DB etc, and try to make non-breaking changes to accomodate these. That way the app code does not need to change.

API Versioning: the version of the software that you have released (your api). Start using version number from the START.
Three common formats -
>Use the date of release (10-01-2015)  twilio use this
>Major and minor version.  "12.61", "13.00" of "v13.00"  facebook use this
>Major version only. "12", "13" or "v13" uber use this
Where does the consumer specify the version they want?
>http header    x-myapi-version:1.2
>query param    /post?version=1.2  facebook use this
>URL            /v1/products   uber use this
Hybrids: Stripe API -  /v3/charges  along with http-header:"2016-07-06" (minor change is here)

API Lifecycle: Release -> Deprecate -> Retire
>Deprecate means there is a newer version out there... and that this is not the latest version. All NEW consumers should automatically start with the latest one and not any deprecated version.
>At any point in time, you will have 2-3 versions out there, you have to support these multiple versions and assist consumers to transtion to newer versions.
>Manage a change log, this shuld clearly show the reason and benefits of the new version

API Caching:  Storing data
Client -> ISP -> Gateway -> Web Server (mid-tier) -> DB    (gateway is the single point entry into a organisation's internal network, the gateway is where authentication is checked)
Caching can occur at any of these touchpoints. Your API must control WHERE something is cached or not cached.
Performance is affected by the throughput of the weekest link in the above chain. Maybe your DB can do only 50calls/second.
Caching helps - performance, throughput of the whole system.

What to cache? This depends on the data's following aspects -
>speed of change  : rapidly changing data should not be cached
>time sensitivity   : If getting the data slow is not a problem, you don't need to cache it. Let it come slowly.
>security  : highly secure data should not be cached in the intermediate layers
static content like html/js/jpeg/css/pdf can be cached for longer time. Their speed of change is low.
Stock prices change every second.
customer profile  (high security)
news feeds (not time sensitive)

HTTP Cache Control Directive - (this is specified in the http response) (Cache-Control, ETag, max-age)
This directive lets the API developer to specify - who can cache? for how long to cache and when not to cache...
According to the HTTP (RFC2616) spec, cache-control directives must be OBEYED by all caching mechanisms along the request/response chain. Each intermediary touchpoint reads this cache-control response header.
The consumer can also send a cache-control in his request header, in this case, the API must follow what the request says.

Cache-Control : "directive-1, directive-2" etc.. Example: "private, max-age=60"
private:  private is meant only for the browser, nothing in between should cache it. The browser can cache it.
public: by default cache-control is set to public. Anyone in bettween can cache it.
no-store: nobody including the browser, must cache this.
no-cache: Nobody can cache it. But the browser can use ETag. (i.e only ETag is stored on the browser). In this case, the consumer will always hit the server.

ETag: Every response is given a unique id (the response is hashed to an ID and is sent by the server). The next time the client makes the request it sends this ETag to the server, the API implementation checks this eTag against what it has, if there is no change it sends a 304 not modified. Your API must provide ETags for large responses. Use ETag is the spped of cahnge of your data is unpredictable.

max-age: Lifetime of the cache data or its validity in terms of seconds. It determines how long the cached value is VALID.

API Partial Response
Instead of getting a giant object with all the fields, you get only few of the fields.
Benefits:
>Consumer controls the granularity (response size)
>Better performance and optimized resource usage. If the client receives a huge data set, he has to use a lot of cpu and memory to parse it.
>One common APi to support mutiple devices and form factors.
How does the consumer specify granularity? - URL
/people:(id,first-name,last-name)  linkedin uses this.
/friends?fields=id,name,city   facebook and pintrest use this (returns only those three fields)

Pagination: A type of partial resposne, where the consumer controls the number of records in the response.
A website might want the first 50, but a mobile app might want only the first 10. (screen real estate matters)
>Cursor based     facebook uses this. Custom mechanism built by them. It is known to be the most efficient.
>Offset based     Most commonly used. linkedin uses this. Use of query params. /people?offset=6&limit=10   or   /people?page=3&rowsperpage=25
>Use of http link header     rarely used. Github uses this.

API Security: Bottomline is you must protect the enterprise's assets and data.  Authentication + Authorization + Data Encryption for transmission
Hacker can attack any touchpoint.  Attack the app, attach the gateway, or breach the firewall and directly attack the DB.
What is an attack?
>Data Theft
>Data manipulation
>Denial of service
>Mimick an app and calling your api

Basic Authentication: username + password is base64 encoded and put in the http header "authorization". The app-developer sends this in his request.
Authorisation = "Basic <username>:<password>"
Disadvantages:
>Caller has to send credentials in every request. The server can't support sessions as that is not REST.
>If one server is calling your web-server(API) directly, credentials are prone to man in the middle attack (http)
>If one mobile app is directly calling your API, that means the app-developers had to hard-code the username-password into the mobile app which is downloaded on the users phone.
This MUST be used with HTTPS/TLS

Token Based Authentication and JWT (JSON Web Tokens)
>App calls token endpoint by sending credentials in a json object in the request body (POST call)
>API generates and stores a token. It then gives it to the app.
>Every subsequent call that the app makes, it must send the token. (the server will validate the token and its expiry and then respond)

Token is an encoded string. JWT is a common standard for creating a token.
A JWT token has 3 parts:  "<header>.<payload>.<signature>"
>Header  (metadata) {type:which is mostly "JWT", alg: hashing algo used "HS256"/"HMAC"} this object is base64 encoded.
>Payload (claims) Registered Claim {issuer: expirt: nbf:} OR Public Claim { appName:  appEmail:  appPhone:} OR Private Claim { consumer and provider decide the fields} This object is base64 encoded.
>Signature: taking the base64 header, and base64 payload and a secret, AND THEN hashing them. The secret is provided by the API provider.
Tokens maybe set to expire.
Tokens maybe revoked by the API.

API Key And secret: Very long srings of random characters.
You need to register your application with the API provider. They will give you a key and secret (these are meant for the app code).
API Key: identifies an API consumer (client key or client id)
API Secret: used by the consumer to prove it's identity.
The client sends key+secret to API for authentication. (this sent it http header or query params or request body) Acutally the secret is hashed by the app and sent (called digital signature)
API key and Secret can be used fo basic auth, token based auth and anonymous access by way of digital signatures

OAuth2.0: This is a Authorization protocol and not an authentication protocol.
>API key and secret
>Authorization Token (this is to get an access token), Access tokens each having different scope, Refresh token
>Grants: 5 types - authorisation scope, implicit, resource owner credentials, client credentials, refresh token.

Functional Attacks
>SQL Injection: attacker inserts SQL in form data, which is passed to the API. The where clause in the API is manipulated.
>Fuzzing: random input to understand API vulnerablitites Your API must never send DB error straight back to the consumer, this way he will understand your issues.
>Cross site forgery: Attack script placed on user's browser
>Token hijacking: Theft of user's token

API Documentation: Collaboration netween APP developer and API developer
Contract Last Approach: Develop your code, then, run a tool that creates the docs. Bad because, it is tough to kepp code and docs in sync.
Contract First: Agree on the specs, then, run a tool which will create skeleton code for you to later fill in. This is the better appraoch.
You must provide a mock API for a the app developers.

API Spec/Doc standards: WADL , RAML, apiblueprint, Apiary, Swagger
Swagger is most common. It is now maintained by the Open API Initiative (OAI).

Swagger tools allow specc to be used for documentation creation, server code creation, client code creation and virtual services (mocks)
You write swagger spec in YAML or JSON. It is a superset of JSON. (it uses indentation for everything)
Use editor.swagger.io to edit YAML
YML is its own language. Worth a read. So for swagger you have to particular "names" in the different name-value pairs.

API Management : Publishing and overseeing APIs in a secure and scalable way.
Some platforms - akana, apigee, 3scale, mulesift, ibmAPIConnect, mashery, ws02
Developer Portal: Self serve sign up + API Documentation + API Support. If some APIs are private, user can a raise a ticket in the system. (have tiers of access)
Provide sample code, sample data, provide an SDK, FAQs, provide best practices, bug reporting utility, build a developer community, social media, blogs.

At minimum, an API Key is a must.
>You can invalidate a client anytime
>Generate analytics with key as the identifier.

Traffic management:
>Response Time Consistency: Just because 1 app is creating >100 call/second, does not mean you respond slowly to app2 and app3. You have to treat all apps equally.
>SLA: Service Level Agreement:  Max Calls per day, Max Concurrent calls per second, Max Response Time for each request.
>Protecting the API backend: throttle requests at the gateway.
You need to prevent calls from even hitting the backend.

API analytics - Needed for service improvement, understand attacks
Metrics:  Mean, Median and Mode of -
Response Time
Throughput
Peaks/troughs
Error rate  (backend errors or policy errors)
Are you matching your SLA

Usage:
Developer counter
Most popular API
Geo Location of pings
Device Types

Transactions (business analytics) : Specific to the business.

API Monetization  : An api is a PRODUCT!  (AWS, twillio, capitalOne)
>Business Case: New revenue, Brand awareness, new partnerships
>Research: Who is the consumer, their needs and wants, why use your api
>Build it: plan and pilot
>Marketing: blogs, hackathons, press release
>Launch: create an open source app
>Post Launch: Support

Models:
Free: brand recognition, outreach
Freemium: free, then pay for premium features
Enterprise: third party apps buy your API to use your data and share their revenue with you.
Developer: Developer directly pays the API provider. Pay as you go, subscription model, pay per transaction




